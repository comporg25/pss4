Disassembled by command `objdump -dS test`

test:     file format elf64-x86-64

0000000000001139 <function>:
objdump: Warning: source file /home/ani/comporg25/stack_smashing/test.c is more recent than object file
#include "stdio.h"

void function(int a, int b, int c) {
    1139:	55                   	push   %rbp
    113a:	48 89 e5             	mov    %rsp,%rbp
    113d:	89 7d ec             	mov    %edi,-0x14(%rbp)
    1140:	89 75 e8             	mov    %esi,-0x18(%rbp)
    1143:	89 55 e4             	mov    %edx,-0x1c(%rbp)
	 // let us have some pointer which we want later to point to that location in stack we are searching.
//char str[8];	 
int *ret=33;
    1146:	48 c7 45 f8 21 00 00 	movq   $0x21,-0x8(%rbp)
    114d:	00 
   // find the address in stack where the function return address is stored.
 ret=&ret + 2;
ret = (int*)((char*)&a + 28);
    114e:	48 8d 45 ec          	lea    -0x14(%rbp),%rax
    1152:	48 83 c0 1c          	add    $0x1c,%rax
    1156:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	 // when you found it you have to modify it.
	 // whati is X? change the address in a way that "x = 1" will never be executed.
 (*ret) += 7;
    115a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    115e:	8b 00                	mov    (%rax),%eax
    1160:	8d 50 07             	lea    0x7(%rax),%edx
    1163:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1167:	89 10                	mov    %edx,(%rax)
}
    1169:	90                   	nop
    116a:	5d                   	pop    %rbp
    116b:	c3                   	ret

000000000000116c <main>:

void main() {
    116c:	55                   	push   %rbp
    116d:	48 89 e5             	mov    %rsp,%rbp
    1170:	48 83 ec 10          	sub    $0x10,%rsp
  int x;

  x = 0;
    1174:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  function(1,2,3);
    117b:	ba 03 00 00 00       	mov    $0x3,%edx
    1180:	be 02 00 00 00       	mov    $0x2,%esi
    1185:	bf 01 00 00 00       	mov    $0x1,%edi
    118a:	e8 aa ff ff ff       	call   1139 <function>
  x = 1;
    118f:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  printf("%d\n",x);
    1196:	8b 45 fc             	mov    -0x4(%rbp),%eax
    1199:	89 c6                	mov    %eax,%esi
    119b:	48 8d 05 62 0e 00 00 	lea    0xe62(%rip),%rax        # 2004 <_IO_stdin_used+0x4>
    11a2:	48 89 c7             	mov    %rax,%rdi
    11a5:	b8 00 00 00 00       	mov    $0x0,%eax
    11aa:	e8 81 fe ff ff       	call   1030 <printf@plt>
}
    11af:	90                   	nop
    11b0:	c9                   	leave
    11b1:	c3                   	ret

Disassembly of section .fini:

00000000000011b4 <_fini>:
    11b4:	48 83 ec 08          	sub    $0x8,%rsp
    11b8:	48 83 c4 08          	add    $0x8,%rsp
    11bc:	c3                   	ret
